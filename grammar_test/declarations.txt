============
empty method
============

def foo
end

def foo?
end

def foo!
end

---

(program
  (method (identifier))
  (method (identifier))
  (method (identifier)))

================
method with body
================

def foo
  bar
end

---

(program (method (identifier) (identifier)))

================
method with args
================

def foo(bar)
end

---

(program (method (identifier) (formal_parameters (identifier))))

================================
method with unparenthesized args
================================

def foo bar
end

---

(program (method (identifier) (formal_parameters (identifier))))

=========================
method with multiple args
=========================

def foo(bar, quux)
end

---

(program (method (identifier) (formal_parameters (identifier) (identifier))))

=========================================
method with multiple unparenthesized args
=========================================

def foo bar, quux
end

---

(program (method (identifier) (formal_parameters (identifier) (identifier))))

=========================================
method with keyword parameters
=========================================

def foo(bar: nil, baz:)
end

---

(program
  (method (identifier)
    (formal_parameters
      (keyword_parameter (identifier) (nil))
      (keyword_parameter (identifier)))))

=========================================
method with default parameters
=========================================

def foo(bar = nil)
end

def foo(bar=nil)
end

---

(program
  (method (identifier)
    (formal_parameters (optional_parameter (identifier) (nil))))
  (method (identifier)
    (formal_parameters (optional_parameter (identifier) (nil)))))

=========================================
method with interesting params
=========================================

def foo(*options)
end

def foo(x, *options)
end

def foo(x, *options, y)
end

def foo(**options)
end

def foo(name:, **)
end

def foo(&block)
end

---

(program
  (method (identifier) (formal_parameters (splat_parameter (identifier))))
  (method (identifier) (formal_parameters (identifier) (splat_parameter (identifier))))
  (method (identifier) (formal_parameters (identifier) (splat_parameter (identifier)) (identifier)))
  (method (identifier) (formal_parameters (hash_splat_parameter (identifier))))
  (method (identifier) (formal_parameters (keyword_parameter (identifier)) (hash_splat_parameter)))
  (method (identifier) (formal_parameters (block_parameter (identifier)))))

=========================================
singleton method
=========================================

def self.foo
end

---

(program (method (self) (identifier)))

=========================================
singleton method with body
=========================================

def self.foo
  bar
end

---

(program (method (self) (identifier) (identifier)))


=========================================
singleton method with arg
=========================================

def self.foo(bar)
end

---

(program (method (self) (identifier) (formal_parameters (identifier))))

=========================================
singleton method with un-parenthesized arg
=========================================

def self.foo bar
end

---

(program (method (self) (identifier) (formal_parameters (identifier))))

=========================================
singleton method with args
=========================================

def self.foo(bar, baz)
end

---

(program (method (self) (identifier) (formal_parameters (identifier) (identifier))))


=========================================
singleton method with un-parenthesized args
=========================================

def self.foo bar, baz
end

---

(program (method (self) (identifier) (formal_parameters (identifier) (identifier))))

===========
empty class
===========

class Foo
end

---

(program (class_declaration (identifier)))

==============
empty subclass
==============

class Foo < Bar
end

---

(program (class_declaration (identifier) (identifier)))

==================================
empty subclass of namespaced class
==================================

class Foo < Bar::Quux
end

---

(program (class_declaration (identifier) (identifier) (identifier)))

===============
class with body
===============

class Foo
	def bar
	end
end

---

(program (class_declaration (identifier) (method (identifier))))

===============
singleton class
===============

class << self
end

class << Foo
end

---

(program
  (singleton_class_declaration (identifier))
  (singleton_class_declaration (identifier)))


============
empty module
============

module Foo
end

---

(program (module_declaration (identifier)))

================
module with body
================

module Foo
	def bar
	end
end

---

(program (module_declaration (identifier) (method (identifier))))

=======
__END__
=======

word
__END__
word

---

(program (identifier) (uninterpreted))

==============================
module with class with methods
==============================

module A
  class B < C
    include D::E.f.g

    attr_reader :h

    # i
    def j
      k
    end

    def self.l
    end
  end
end

---

(program (module_declaration (identifier)
  (class_declaration (identifier) (identifier)
    (function_call (identifier) (argument_list
      (member_access
        (member_access
          (scope_resolution_expression (identifier) (identifier))
          (identifier))
        (identifier))))

    (function_call (identifier) (argument_list (symbol)))

    (comment)
    (method (identifier) (identifier))
    (method (self) (identifier)))))
