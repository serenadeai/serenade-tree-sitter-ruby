======
symbol
======

:foo
:foo!
:foo?
:foo=
:@foo
:@foo_0123_bar
:@@foo
:$foo
:_bar

---

(program
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol))

======
symbol operators
======

:+
:-
:+@
:-@
:[]
:[]=
:&
:^
:|
:~
:/
:%
:*
:**
:==
:===
:=~
:>
:>=
:>>
:<
:<=
:<<
:<=>

---

(program
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol))

====================
single quoted symbol
====================

:'foo bar'
:'#{'

---

(program
  (symbol)
  (symbol))

====================
double quoted symbol
====================

:"foo bar"
:"#"

---

(program (symbol) (symbol))

=======================================
double quoted symbol with interpolation
=======================================

:"foo #{bar}"

---

(program (symbol (identifier)))

=========================================
percent symbol with unbalanced delimiters
=========================================

%s/a/
%s\a\
%s#a#

---

(program (symbol) (symbol) (symbol))

=======================================
percent symbol with balanced delimiters
=======================================

%s{a{b}c}
%s<a<b>c>
%s(a(b)c)
%s[a[b]c]

---

(program (symbol) (symbol) (symbol) (symbol))

=======================================
global variables
=======================================

$foo
$$
$&
$`
$'
$+
$1
$2
$3
$4
$5
$6
$7
$8
$9
$0
$10

---

 (program
  (global_variable)
  (global_variable)
  (global_variable)
  (global_variable)
  (global_variable)
  (global_variable)
  (global_variable)
  (global_variable)
  (global_variable)
  (global_variable)
  (global_variable)
  (global_variable)
  (global_variable)
  (global_variable)
  (global_variable)
  (global_variable)
  (global_variable))

=======
integer
=======

1234

---

(program (integer))

=======
integer as object
=======

3.times

---

(program (call (integer) (identifier)))

=======================
integer with underscore
=======================

1_234

---

(program (integer))

===========================
integer with decimal prefix
===========================

0d1_234

---

(program (integer))

===============================
integer with hexadecimal prefix
===============================

0xa_bcd_ef0_123_456_789

---

(program (integer))

=========================
integer with octal prefix
=========================

01234567
0o1234567

---

(program (integer) (integer))

==========================
integer with binary prefix
==========================

0b1_0

---

(program (integer))

=====
float
=====

1.234_5e678_90
1E30

---

(program (float) (float))

=======
boolean
=======

true

---

(program (boolean))

===
nil
===

nil

---

(program (nil))

====================
single-quoted string
====================

''
' '
'  '

---

(program (string) (string) (string))

==============================================
single-quoted string with escaped single quote
==============================================

'\''

---

(program (string))

===========================================
single-quoted string with escaped backslash
===========================================

'\\'

---

(program (string))

=================================================
single-quoted string with backslash and character
=================================================

'\d'

---

(program (string))

=================================================
single-quoted string with pound and curly brace
=================================================

'#{hello'

---

(program (string))

====================
double-quoted string
====================

""
" "
"  "

---

(program (string) (string) (string))

==============================================
double-quoted string with escaped double quote
==============================================

"\""

---

(program (string))

===========================================
double-quoted string with escaped backslash
===========================================

"\\"

---

(program (string))

=================================================
double-quoted string with backslash and character
=================================================

"\d"

---

(program (string))

=================================
double-quoted string with just pound
=================================

"#"

---

(program (string))

=============
interpolation
=============

"#{foo}"
"#{':foo' unless bar}"

---

(program
  (string (identifier))
  (string (unless_modifier (string) (identifier))))

=====================
escaped interpolation
=====================

"\#{foo}"

---

(program (string))

===========================================
percent q string with unbalanced delimiters
===========================================

%q/a/
%q\a\
%q#a#

---

(program (string) (string) (string))

=========================================
percent q string with balanced delimiters
=========================================

%q<a<b>c>
%q{a{b}c}
%q[a[b]c]
%q(a(b)c)

---

(program (string) (string) (string) (string))

=========================================
percent string with unbalanced delimiters
=========================================

%/a/
%\a\
%#a#

---

(program (string) (string) (string))

=========================================
percent string with balanced delimiters
=========================================

%<a<b>c>
%{a{b}c}
%[a[b]c]
%(a(b)c)

---

(program (string) (string) (string) (string))

===========================================
percent Q string with unbalanced delimiters
===========================================

%Q#a#
%Q/a/
%Q\a\

---

(program (string) (string) (string))

=========================================
percent Q string with balanced delimiters
=========================================

%Q<a<b>c>
%Q{a{b}c}
%Q[a[b]c]
%Q(a(b)c)

---

(program (string) (string) (string) (string))

===============
string chaining
===============

%q(a) "b" "c"
"d" "e"

---

(program
  (chained_string (string) (string) (string))
  (chained_string (string) (string)))

========================================
nested strings with different delimiters
========================================

"abc#{
  %r(def(ghi#{
    `whoami`
  })klm)
}nop"


---

(program
  (string (regex (subshell))))

========================================
basic heredocs
========================================

<<SQL
heredoc content
SQL

if indentation_works?
  <<"sql"
  heredoc content
  sql
end

<<'SQL'
heredoc content
SQL

---

(program
  (heredoc_beginning) (heredoc_end)
  (if (identifier)
    (heredoc_beginning) (heredoc_end))
  (heredoc_beginning) (heredoc_end))

========================================
heredocs in context starting with dot
========================================

def foo
  select(<<-SQL)
  .
  SQL
end

---

(program (method (identifier)
  (method_call (identifier) (argument_list (heredoc_beginning))) (heredoc_end)))

========================================
heredocs with method continuation
========================================

select(<<-SQL)
ab
SQL
  .join()

---

(program (method_call
  (call
    (method_call
      (identifier)
      (argument_list (heredoc_beginning)))
    (heredoc_end)
    (identifier))
  (argument_list)))

========================================
heredocs with interpolation
========================================

<<TEXT
a
b #{[1, "c #{2} d", 3]} e
#{4} f #{foo.bar}
g
TEXT

return

---

(program
  (heredoc_beginning)
  (heredoc_end
    (array (integer) (string (integer)) (integer))
    (integer)
    (call (identifier) (identifier)))
  (return))

========================================
multiple heredocs
========================================

puts <<-ONE.size, <<-TWO.size
first heredoc content
ONE
second heredoc content
TWO

---

(program
  (method_call (identifier) (argument_list
    (call (heredoc_beginning) (identifier))
    (call (heredoc_beginning) (identifier))))
  (heredoc_end)
  (heredoc_end))

========================================
heredoc content that starts with a dot
========================================

-> {
  select(<<-SQL)
  .
  SQL
}

---

(program (lambda (method_call (identifier) (argument_list (heredoc_beginning))) (heredoc_end)))

========================================
un-terminated heredocs
========================================

<<-ONE

---

(program
  (heredoc_beginning)
  (heredoc_end))

==================
backticks subshell
==================

`/usr/bin/env test blah blah`

---

(program (subshell))

==============================
backticks subshell with escape
==============================

`/usr/bin/env test blah \`blah\``

---

(program (subshell))

===========
empty array
===========

[]

---

(program (array))

=====
array
=====

[ foo, bar ]
[foo, *bar]
[foo, *@bar]
[foo, *$bar]
[foo, :bar => 1]

---

(program
  (array (identifier) (identifier))
  (array (identifier) (splat_argument (identifier)))
  (array (identifier) (splat_argument (instance_variable)))
  (array (identifier) (splat_argument (global_variable)))
  (array (identifier) (pair (symbol) (integer))))

=====
array as object
=====

[1, 2].any? { |i| i > 1 }

---
(program
  (method_call (call (array (integer) (integer)) (identifier))
    (block (block_parameters (identifier)) (binary (identifier) (integer)))))

=========================
array with trailing comma
=========================

[ foo, ]

---

(program (array (identifier)))

=====================
empty percent w array
=====================

%w()

---

(program (array))

==========================
unbalanced percent w array
==========================

%w/one two/

---

(program (array))

===============
percent w array
===============

%w(word word)

---

(program (array))

===================================
percent W array with interpolations
===================================

%W(a #{b} c)

---

(program (array (identifier)))

=====================
empty percent i array
=====================

%i()

---

(program (array))

==========================
unbalanced percent i array
==========================

%i/one two/

---

(program (array))

===============
percent i array
===============

%i(word word)

---

(program (array))

=============================
percent I array with captures
=============================

%I(a #{b} c)

---

(program (array (identifier)))

==========
empty hash
==========

{}

---

(program (hash))

=========================
hash with expression keys
=========================

{ "a" => 1, "b" => 2 }
{ [] => 1 }
{ foo => 1 }

---

(program
	(hash (pair (string) (integer)) (pair (string) (integer)))
	(hash (pair (array) (integer)))
	(hash (pair (identifier) (integer))))

======================
hash with keyword keys
======================

{ a: 1, b: 2 }

---

(program (hash (pair (identifier) (integer)) (pair (identifier) (integer))))

========================
hash with trailing comma
========================

{ a: 1, }

---

(program (hash (pair (identifier) (integer))))

==================
regular expression
==================

/^(foo|bar[^_])$/i

---

(program (regex))

=====================================
regular expression with interpolation
=====================================

/word#{foo}word/
/word#word/
/#/

---

(program
  (regex (identifier))
  (regex)
  (regex))

=======================================================
percent r regular expression with unbalanced delimiters
=======================================================

%r/a/
%r\a\
%r#a#

---

(program (regex) (regex) (regex))


=====================================================
percent r regular expression with balanced delimiters
=====================================================

%r<a<b>c>
%r{a{b}c}
%r[a[b]c]
%r(a(b)c)
%r(#)

---

(program (regex) (regex) (regex) (regex) (regex))

=========================================================================
percent r regular expression with unbalanced delimiters and interpolation
=========================================================================

%r/a#{b}c/

---

(program (regex (identifier)))

=======================================================================
percent r regular expression with balanced delimiters and interpolation
=======================================================================

%r(a#{b}c)

---

(program (regex (identifier)))

==============
empty function
==============

-> {}

---

(program (lambda))

==================
lambda literal with body
==================

-> { foo }

---

(program (lambda (identifier)))

====================
lambda literal with an arg
====================

-> foo { 1 }
-> (foo) { 1 }
-> *foo { 1 }
-> foo: 1 { 2 }

---

(program
  (lambda (lambda_parameters (identifier)) (integer))
  (lambda (lambda_parameters (identifier)) (integer))
  (lambda (lambda_parameters (splat_parameter (identifier))) (integer))
  (lambda (lambda_parameters (keyword_parameter (identifier) (integer))) (integer)))

===========================
lambda literal with multiple args
===========================

-> (a, b, c) {
  1
  2
}

---

(program (lambda (lambda_parameters (identifier) (identifier) (identifier)) (integer) (integer)))

====================
lambda literal with do end
====================

-> (foo) do
  1
end

---

(program (lambda (lambda_parameters (identifier)) (integer)))
