=====================
empty while statement
=====================

while foo do
end

---

(program (while_statement (identifier)))

================
while without do
================

while foo
end

---

(program (while_statement (identifier)))

=========================
while statement with body
=========================

while foo do
  bar
end

---

(program (while_statement (identifier) (identifier)))

=====================
empty until statement
=====================

until foo do
end

---

(program (until_statement (identifier)))

=========================
until statement with body
=========================

until foo do
  bar
end

---

(program (until_statement (identifier) (identifier)))

==================
empty if statement
==================

if foo
end

---

(program (if_statement (identifier)))

=======================
empty if/else statement
=======================

if foo then
else
end

---

(program (if_statement (identifier) (else_block)))

==================================
single-line if then else statement
==================================

if foo then bar else quux end

---

(program (if_statement (identifier) (identifier) (else_block (identifier))))

========
if elsif
========

if foo
  bar
elsif quux
  baz
end

---

(program
  (if_statement (identifier) (identifier)
  (elsif_block (identifier) (identifier))))

=============
if elsif else
=============

if foo
  bar
elsif quux
  baz
else
  bat
end

---

(program
  (if_statement (identifier) (identifier)
  (elsif_block (identifier) (identifier))
  (else_block (identifier))))

======================
empty unless statement
======================

unless foo
end

---

(program (unless_statement (identifier)))

================================
empty unless statement with then
================================

unless foo then
end

---

(program (unless_statement (identifier)))

================================
empty unless statement with else
================================

unless foo
else
end

---

(program (unless_statement (identifier) (else_block)))

===
for
===

for x in y do
	f
end

---

(program (for_statement (identifier) (identifier) (identifier)))

==============
for without do
==============

for x in y
  f
end

---

(program (for_statement (identifier) (identifier) (identifier)))

===========
empty begin
===========

begin
end

---

(program (begin_statement))

===============
begin with body
===============

begin
	foo
end

---

(program (begin_statement (identifier)))

===============
begin with else
===============

begin
	foo
else
  bar
end

---

(program
  (begin_statement (identifier)
    (else_block (identifier))))

===============
begin with ensure
===============

begin
	foo
ensure
  bar
end

---

(program
  (begin_statement (identifier)
    (ensure_block (identifier))))

=======================
begin with empty rescue
=======================

begin
rescue
end

begin
rescue then
end

begin
rescue
  bar
end


---

(program
  (begin_statement (rescue_block))
  (begin_statement (rescue_block))
  (begin_statement (rescue_block (identifier))))

===========================
begin with rescue with args
===========================

begin
rescue x
end

begin
rescue x then
end

begin
rescue x
  bar
end

begin
rescue => x
  bar
end

begin
rescue x, y
  bar
end

begin
rescue Error => x
end

begin
rescue Error => x
  bar
end

---

(program
  (begin_statement (rescue_block (rescue_arguments (identifier))))
  (begin_statement (rescue_block (rescue_arguments (identifier))))
  (begin_statement (rescue_block (rescue_arguments (identifier)) (identifier)))
  (begin_statement (rescue_block (rescued_exception) (identifier)))
  (begin_statement (rescue_block (rescue_arguments (identifier) (identifier)) (identifier)))
  (begin_statement (rescue_block (rescue_arguments (identifier)) (rescued_exception)))
  (begin_statement (rescue_block (rescue_arguments (identifier)) (rescued_exception) (identifier))))

=================
rescue modifier
=================

foo rescue nil

---

(program (rescue_modifier (identifier) (nil)))

============================
begin with all the trimmings
============================

begin
	foo
rescue x
  bar
else
	quux
ensure
  baz
end

---

(program
  (begin_statement (identifier)
    (rescue_block (rescue_arguments (identifier)) (identifier))
    (else_block (identifier))
    (ensure_block (identifier))))

======
return
======

return foo

---

(program (return_statement (identifier)))

====================
return without value
====================

return

---

(program (return_statement))

====
case
====

case foo
when bar
end

---

(program
  (case_expression (identifier)
  (when_block (pattern (identifier)))))

==============
case with else
==============

case foo
when bar
else
end

---

(program
  (case_expression (identifier)
    (when_block (pattern (identifier)))
    (else_block)))

==============================
case with multiple when blocks
==============================

case a
when b
  c
when d
  e
else
  f
end

---

(program
  (case_expression (identifier)
    (when_block (pattern (identifier)) (identifier))
    (when_block (pattern (identifier)) (identifier))
    (else_block (identifier))))

==============
case with assignment
==============

x = case foo
when bar
else
end

---

(program (assignment (identifier) (case_expression (identifier) (when_block (pattern (identifier))) (else_block))))

==============
case with expression
==============

x = case foo = bar | baz
when bar
else
end

---

(program (assignment (identifier) (case_expression (assignment (identifier) (bitwise_or (identifier) (identifier))) (when_block (pattern (identifier))) (else_block))))
