======
symbol
======

:foo
:foo!
:foo?

---

(program
	(symbol)
	(symbol)
	(symbol))

====================
single quoted symbol
====================

:'foo bar'

---

(program (symbol))

====================
double quoted symbol
====================

:"foo bar"

---

(program (symbol))

=======================================
double quoted symbol with interpolation
=======================================

:"foo #{bar}"

---

(program (symbol (interpolation (identifier))))

=======================================
percent symbol with balanced delimiters
=======================================

%s(a(b)c)

---

(program (symbol))

=======
integer
=======

1234

---

(program (integer))

=======================
integer with underscore
=======================

1_234

---

(program (integer))

===========================
integer with decimal prefix
===========================

0d1_234

---

(program (integer))

===============================
integer with hexadecimal prefix
===============================

0xa_bcd_ef0_123_456_789

---

(program (integer))

=========================
integer with octal prefix
=========================

01234567
0o1234567

---

(program (integer) (integer))

==========================
integer with binary prefix
==========================

0b1_0

---

(program (integer))

=====
float
=====

1.234_5e678_90

---

(program (float))

=======
boolean
=======

true

---

(program (boolean))

===
nil
===

nil

---

(program (nil))

====================
single-quoted string
====================

''
' '
'  '

---

(program (string) (string) (string))

==============================================
single-quoted string with escaped single quote
==============================================

'\''

---

(program (string))

===========================================
single-quoted string with escaped backslash
===========================================

'\\'

---

(program (string))

=================================================
single-quoted string with backslash and character
=================================================

'\d'

---

(program (string))

====================
double-quoted string
====================

""
" "
"  "

---

(program (string) (string) (string))

==============================================
double-quoted string with escaped double quote
==============================================

"\""

---

(program (string))

===========================================
double-quoted string with escaped backslash
===========================================

"\\"

---

(program (string))

=================================================
double-quoted string with backslash and character
=================================================

"\d"

---

(program (string))

=============
interpolation
=============

"#{foo}"

---

(program (string (interpolation (identifier))))

=====================
escaped interpolation
=====================

"\#{foo}"

---

(program (string))

=========================================
percent q string with balanced delimiters
=========================================

%q(a(b)c)

---

(program (string))

=========================================
percent string with balanced delimiters
=========================================

%(a(b)c)

---

(program (string))

=========================================
percent Q string with balanced delimiters
=========================================

%Q(a(b)c)

---

(program (string))

===============
string chaining
===============

%q(a) "b" "c"

---

(program (string))

==================
backticks subshell
==================

`/usr/bin/env test blah blah`

---

(program (subshell))

==============================
backticks subshell with escape
==============================

`/usr/bin/env test blah \`blah\``

---

(program (subshell))

===========
empty array
===========

[]

---

(program (array))

=====
array
=====

[ foo, bar ]

---

(program (array (identifier) (identifier)))

=====
array as object
=====

[1, 2].any? { |i| i > 1 }

---
(program
	(method_call (call (array (integer) (integer)) (identifier))
		(block (formal_parameters (identifier)) (comparison (identifier) (integer)))))

=========================
array with trailing comma
=========================

[ foo, ]

---

(program (array (identifier)))

=====================
empty percent w array
=====================

%w()

---

(program (array))

===============
percent w array
===============

%w(word word)

---

(program (array))

===================================
percent W array with interpolations
===================================

%W(a #{b} c)

---

(program (array (interpolation (identifier))))

=====================
empty percent i array
=====================

%i()

---

(program (array))

===============
percent i array
===============

%i(word word)

---

(program (array))

=============================
percent I array with captures
=============================

%I(a #{b} c)

---

(program (array (interpolation (identifier))))

==========
empty hash
==========

{}

---

(program (hash))

=========================
hash with expression keys
=========================

{ "a" => 1, "b" => 2 }

---

(program (hash (pair (string) (integer)) (pair (string) (integer))))

======================
hash with keyword keys
======================

{ a: 1, b: 2 }

---

(program (hash (pair (identifier) (integer)) (pair (identifier) (integer))))

========================
hash with trailing comma
========================

{ a: 1, }

---

(program (hash (pair (identifier) (integer))))

==================
regular expression
==================

/^(foo|bar[^_])$/i

---

(program (regex))

=====================================
regular expression with interpolation
=====================================

/word#{foo}word/
/word#word/

---

(program
	(regex (interpolation (identifier)))
	(regex))

=====================================================
percent r regular expression with balanced delimiters
=====================================================

%r(a(b)c)

---

(program (regex))

=======================================================================
percent r regular expression with balanced delimiters and interpolation
=======================================================================

%r(a#{b}c)

---

(program (regex (interpolation (identifier))))

==============
empty function
==============

-> {}

---

(program (lambda))

==================
lambda literal with body
==================

-> { foo }

---

(program (lambda (identifier)))

====================
lambda literal with an arg
====================

-> foo { 1 }
-> (foo) { 1 }
-> *foo { 1 }
-> foo: 1 { 2 }

---

(program
	(lambda (identifier) (integer))
	(lambda (formal_parameters (identifier)) (integer))
	(lambda (splat_parameter (identifier)) (integer))
	(lambda (keyword_parameter (identifier) (integer)) (integer)))

===========================
lambda literal with multiple args
===========================

-> (a, b, c) {
	1
	2
}

---

(program (lambda (formal_parameters (identifier) (identifier) (identifier)) (integer) (integer)))

====================
lambda literal with do end
====================

-> (foo) do
	1
end

---

(program (lambda (formal_parameters (identifier)) (integer)))
